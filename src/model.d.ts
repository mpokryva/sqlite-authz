/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/policies': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List authorization policies for the given API key */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The given API key's policies */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Policy'][];
          };
        };
      };
    };
    put?: never;
    /** Create an authorization policy for the given API key */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: components['requestBodies']['CreatePolicyRequest'];
      responses: {
        /** @description The created policy */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Policy'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Execute a SQLite query */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            query?: string;
          };
        };
      };
      responses: {
        /** @description The results of the query */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        400: components['responses']['ErrorResponse'];
        401: components['responses']['ErrorResponse'];
        403: components['responses']['ErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api_keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create an API key */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        201: components['responses']['APIKeyResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {unknown} */
    Action: 'select' | 'insert' | 'update' | 'delete';
    Policy: {
      id: string;
      principal: string;
      actions?: components['schemas']['Action'][];
      resource?: string;
      /** @enum {unknown} */
      effect: 'allow' | 'deny';
    };
  };
  responses: {
    /** @description An error occurred */
    ErrorResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          message: string;
          errors?: Record<string, never>[];
        };
      };
    };
    /** @description A new API key */
    APIKeyResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          api_key?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
    /** @description The authorization policy you'd like to create */
    CreatePolicyRequest: {
      content: {
        'application/json': {
          actions?: components['schemas']['Action'][];
          resource?: string;
          /** @enum {unknown} */
          effect: 'allow' | 'deny';
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
