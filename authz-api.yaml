openapi: 3.0.0
info:
  title: Authz API
  description: A simple authz API
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /policies:
    post:
      summary: Create an authorization policy for the given API key
      requestBody:
        $ref: '#/components/requestBodies/CreatePolicyRequest'
      responses:
        201:
          description: The created policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    get:
      summary: List authorization policies for the given API key
      responses:
        200:
          description: The given API key's policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
  /policies/{id}:
    parameters:
      - in: path
        name: id
        description: The policy ID
        schema:
          type: integer
        required: true
    delete:
      summary: Delete an authorization policy
      responses:
        204:
          description: 'Successfully deleted policy'
        404:
          $ref: '#/components/responses/ErrorResponse'
  /query:
    post:
      summary: Execute a SQLite query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                query:
                  type: string
      responses:
        200:
          description: The results of the query
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /api_keys:
    post:
      summary: Create an API key
      responses:
        201:
          $ref: '#/components/responses/APIKeyResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: basic
  requestBodies:
    CreatePolicyRequest:
      description: |
        The authorization policy you'd like to create.
        This authorization implementation is "allow-nothing", meaning that nothing is allowed until a matching allow policy is defined. A 'deny' always overrides any number of 'allow's, allowing you to "poke holes" in broad authz policies (i.e. "allow delete from all tables, except 'very_important_table'").
      content:
        application/json:
          schema:
            type: object
            required:
              - effect
            properties:
              actions:
                description: |
                  The set of actions the policy should be evaluated against.
                  Leave out if you want to match all actions.
                  An explicit empty array will match nothing.
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Action'
              resource:
                type: string
                description: |
                  The resource the policy should be evaluated against.
                  For now, this is tables only.
                  Leave out if you want to match all resources.
                  An empty string will only match a resource without a name (so, probably nothing).
              effect:
                description: |
                  The authorization effect the policy should have if matched.
                enum:
                  - allow
                  - deny
            example:
              allow_select:
                summary: Allow select on a specific resource
                value:
                  actions: ['select']
                  resource: 'my_table'
                  effect: 'allow'
              deny_all:
                summary: Deny all actions on a specific resource
                value:
                  resource: 'my_table'
                  effect: 'deny'
              allow_all:
                summary: Allow all actions on all resources
                value:
                  effect: 'allow'
              allow_insert_all:
                summary: Allow insert on all resources
                value:
                  actions: ['insert']
                  effect: 'allow'
  responses:
    ErrorResponse:
      description: An error occurred
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
    APIKeyResponse:
      description: A new API key
      content:
        application/json:
          schema:
            type: object
            properties:
              api_key:
                type: string

  schemas:
    Action:
      enum:
        - select
        - insert
        - update
        - delete
    Policy:
      type: object
      required:
        - principal
        - effect
        - id
      properties:
        id:
          type: string
        principal:
          type: string
        actions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Action'
        resource:
          type: string
        effect:
          enum:
            - allow
            - deny
